## 不同 JDK版本之间的 intern(方法的区别一JDK6 VS JDK6+

```java
String S = new String("a");
s.intern();
```

当调用intern 方法时

### JDK6

* 如果字符串常量池先前已创建出该字符串对象，则返回池中的该字符串的引用。
* 否则，将此字符串对象添加到字符串常量池中，并且返回该字符串对象的引用。

### JDK6+

* 如果字符串常量池先前已创建出该字符串对象，则返回池中的该字符串的引用。
* 否则
  * 如果该字符串对象已经存在于Java堆中,则将堆中对此对象的引用添加到字符串常量池中，并且返回该引用
  * 如果堆中不存在，则在池中创建该字符串并返回其引用。

**区别:** 仅在于JDK6 仅会在字符串常量池中添加字符串, 以后的版本非但能够像池中添加字符串对象, 还能添加字符串在堆中的引用

Java7之后 常量池放入了堆中(笔记5中有图), 主要原因是之前常量池存在于永久代中, 而永久代的内存极为有限, 如果频繁调用 intern(), 在池中创建对象. 会使得字符串常量池被挤爆, 会引发`java.lang.OutOfMemoryError:PermGen space`异常

### 实例一

常量池移动到堆中带来的影响

###### 代码

```java
public class PermGenErrTest {
    public static void main(String[] args) {
        for(int i = 0; i <= 1000; i++){
            // 将返回的随机字符串添加到字符串常量池中
            getRandomString(1000000).intern();
        }
        System.out.println("Mission Complete!");
    }

    // 返回指定长度的随机字符串
    private static String getRandomString(int length) {
        // 字符串源
        String str="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        Random random = new Random();
        StringBuffer sb = new StringBuffer();
        for ( int i = 0; i < length; i++){
            int number = random.nextInt(62);
            sb.append(str.charAt(number));
        }
        return sb.toString();
    }
}
```

为了方便演示, 将永久代大小调小一点, `-XX:MaxPermSize=6M -XX:PermSize=6M`

###### 在1.6中

```java
java.lang.OutOfMemoryError:PermGen space
```

常量池在永久代中

###### 在1.7中

```java
Mission Complete!
```

将字符串常量池从永久代移动到了堆内存之后, 异常得到了避免

###### 在1.8中

```java
Mission Complete!
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=6M; support was removed in 8.0
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=6M; support was removed in 8.0
```

从 JDK8开始, 取消了永久代, 这些参数没有用了, 同样字符串常量池在堆内存中

### 实例二

常量池存放的内容变化带来的影响

###### 代码

```java
public class InternDifference {
    public static void main(String[] args) {
        String s = new String("a");
        s.intern();
        String s2 = "a";
        System.out.println(s == s2);

        // 这句话是关键, 再不明白再去看一遍视频
        String s3 = new String("a") + new String("a");
        s3.intern();	// 关键
        String s4 = "aa";
        System.out.println(s3 == s4);
    }
}
```

###### 在1.6中

```java
false
false
```

###### 在1.7中, 1.8中(结果相同)

```java
false
true
```

### 解析

##### 前置知识

- 在`""`中声明的字符串, 会在字符串常量池中创建出来
- new出来的, 都是在 Heap区域创建出来
- `new String("a");`
  1. 先在常量池中创建 "a", (如果常量池中没有"a"进行创建, 如果有, 则不进行创建
  2. 再在堆中创建 "a"

##### JDK6

![intern在JDk6中](./图片/intern在JDk6中.png)

##### JDK7及以上

![intern在JDK6之后](./图片/intern在JDK6之后.png)

> JDK6常量池中不可以放引用, JDK6之后常量池中可以放引用



## 对象的创建过程

![对象创建过程](./图片/杂/对象创建过程.png)

1. **类加载检查：** 虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。

2. **分配内存：** 在**类加载检查**通过后，接下来虚拟机将为新生对象**分配内存**。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。**分配方式**有 **“指针碰撞”** 和 **“空闲列表”** 两种，**选择那种分配方式由 Java 堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定**。

**内存分配的两种方式：（补充内容，需要掌握）**

![分配内存](./图片/杂/分配内存.png)

**③初始化零值：** 内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。

**④设置对象头：** 初始化零值完成之后，**虚拟机要对对象进行必要的设置**，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希吗、对象的 GC 分代年龄等信息。 **这些信息存放在对象头中。** 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。

**⑤执行 init 方法：** 在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，`<init>` 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 `<init>` 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。



##  说一下堆内存中对象的分配的基本策略

**堆空间的基本结构：**

![堆结构](./图片/杂/堆结构.png)

上图所示的 eden区、s0区、s1区都属于新生代，tentired 区属于老年代。大部分情况，对象都会首先在 Eden  区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 s0 或者 s1，并且对象的年龄还会加 1(Eden区->Survivor  区后对象的初始年龄变为1)，当它的年龄增加到一定程度（默认为15岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 `-XX:MaxTenuringThreshold` 来设置。

另外，大对象和长期存活的对象会直接进入老年代。

![对象分配策略](./图片/杂/对象分配策略.png)